// Code generated by capnpc-go. DO NOT EDIT.

package echo

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Echo struct{ Client capnp.Client }

// Echo_TypeID is the unique identifier for the type Echo.
const Echo_TypeID = 0x835d8112b2f2ebbc

func (c Echo) Ping(ctx context.Context, params func(Echo_ping_Params) error, opts ...capnp.CallOption) Echo_ping_Results_Promise {
	if c.Client == nil {
		return Echo_ping_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x835d8112b2f2ebbc,
			MethodID:      0,
			InterfaceName: "echo.capnp:Echo",
			MethodName:    "ping",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Echo_ping_Params{Struct: s}) }
	}
	return Echo_ping_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Echo_Server interface {
	Ping(Echo_ping) error
}

func Echo_ServerToClient(s Echo_Server) Echo {
	c, _ := s.(server.Closer)
	return Echo{Client: server.New(Echo_Methods(nil, s), c)}
}

func Echo_Methods(methods []server.Method, s Echo_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x835d8112b2f2ebbc,
			MethodID:      0,
			InterfaceName: "echo.capnp:Echo",
			MethodName:    "ping",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Echo_ping{c, opts, Echo_ping_Params{Struct: p}, Echo_ping_Results{Struct: r}}
			return s.Ping(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Echo_ping holds the arguments for a server call to Echo.ping.
type Echo_ping struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Echo_ping_Params
	Results Echo_ping_Results
}

type Echo_ping_Params struct{ capnp.Struct }

// Echo_ping_Params_TypeID is the unique identifier for the type Echo_ping_Params.
const Echo_ping_Params_TypeID = 0xfe3067a0b17b48a1

func NewEcho_ping_Params(s *capnp.Segment) (Echo_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_ping_Params{st}, err
}

func NewRootEcho_ping_Params(s *capnp.Segment) (Echo_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_ping_Params{st}, err
}

func ReadRootEcho_ping_Params(msg *capnp.Message) (Echo_ping_Params, error) {
	root, err := msg.RootPtr()
	return Echo_ping_Params{root.Struct()}, err
}

func (s Echo_ping_Params) String() string {
	str, _ := text.Marshal(0xfe3067a0b17b48a1, s.Struct)
	return str
}

func (s Echo_ping_Params) Msg() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Echo_ping_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Echo_ping_Params) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Echo_ping_Params) SetMsg(v string) error {
	return s.Struct.SetText(0, v)
}

// Echo_ping_Params_List is a list of Echo_ping_Params.
type Echo_ping_Params_List struct{ capnp.List }

// NewEcho_ping_Params creates a new list of Echo_ping_Params.
func NewEcho_ping_Params_List(s *capnp.Segment, sz int32) (Echo_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Echo_ping_Params_List{l}, err
}

func (s Echo_ping_Params_List) At(i int) Echo_ping_Params { return Echo_ping_Params{s.List.Struct(i)} }

func (s Echo_ping_Params_List) Set(i int, v Echo_ping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Echo_ping_Params_List) String() string {
	str, _ := text.MarshalList(0xfe3067a0b17b48a1, s.List)
	return str
}

// Echo_ping_Params_Promise is a wrapper for a Echo_ping_Params promised by a client call.
type Echo_ping_Params_Promise struct{ *capnp.Pipeline }

func (p Echo_ping_Params_Promise) Struct() (Echo_ping_Params, error) {
	s, err := p.Pipeline.Struct()
	return Echo_ping_Params{s}, err
}

type Echo_ping_Results struct{ capnp.Struct }

// Echo_ping_Results_TypeID is the unique identifier for the type Echo_ping_Results.
const Echo_ping_Results_TypeID = 0xb1aca658b36a4b29

func NewEcho_ping_Results(s *capnp.Segment) (Echo_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_ping_Results{st}, err
}

func NewRootEcho_ping_Results(s *capnp.Segment) (Echo_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_ping_Results{st}, err
}

func ReadRootEcho_ping_Results(msg *capnp.Message) (Echo_ping_Results, error) {
	root, err := msg.RootPtr()
	return Echo_ping_Results{root.Struct()}, err
}

func (s Echo_ping_Results) String() string {
	str, _ := text.Marshal(0xb1aca658b36a4b29, s.Struct)
	return str
}

func (s Echo_ping_Results) Reply() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Echo_ping_Results) HasReply() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Echo_ping_Results) ReplyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Echo_ping_Results) SetReply(v string) error {
	return s.Struct.SetText(0, v)
}

// Echo_ping_Results_List is a list of Echo_ping_Results.
type Echo_ping_Results_List struct{ capnp.List }

// NewEcho_ping_Results creates a new list of Echo_ping_Results.
func NewEcho_ping_Results_List(s *capnp.Segment, sz int32) (Echo_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Echo_ping_Results_List{l}, err
}

func (s Echo_ping_Results_List) At(i int) Echo_ping_Results {
	return Echo_ping_Results{s.List.Struct(i)}
}

func (s Echo_ping_Results_List) Set(i int, v Echo_ping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Echo_ping_Results_List) String() string {
	str, _ := text.MarshalList(0xb1aca658b36a4b29, s.List)
	return str
}

// Echo_ping_Results_Promise is a wrapper for a Echo_ping_Results promised by a client call.
type Echo_ping_Results_Promise struct{ *capnp.Pipeline }

func (p Echo_ping_Results_Promise) Struct() (Echo_ping_Results, error) {
	s, err := p.Pipeline.Struct()
	return Echo_ping_Results{s}, err
}

const schema_85d3acc39d94e0f8 = "x\xda\x12\x88q`2d\xe5gd`\x08\xe4ae" +
	"\xfb\xbf\xe7\xf5\xa7MB\x8d\xb1\xcd\x0c\x82\xdc\xcc\xff\x7f" +
	"<\x982\xf7\xf0\x9a\xcb\xad\x0c\x0c\x8c\x82\xb9M\x82\x85" +
	"\xec\x0c\x0c\x82\xb9\xee\x82S\xd9\x19\x18\xfekzgm" +
	"\x8eX\xb6f#\x83\xa0\x00#\x03\x03+#H\xae\xf6" +
	"\x15\x03\xa3`\xa3=\x03\xe3\xff\x85\x1e\xd5\x1b\x17\xa4\x1b" +
	"\xfcC\x96]\xf8\x88\x81Qp)H659#_" +
	"/9\xb1\x801\xaf\xc0\xca59#\x9f!\x80\x911" +
	"\x90\x85\x99\x95\x81\x01\xae\x91\x11f\xbe\xa0\xa0\x16\x03\x93" +
	" +;\x7fAf^\xba\x03c\x00#B;\x13T" +
	"\xbb\x1eHJ%(\xb5\x98\xbf4\xa7\xa48\x90\x85\x99" +
	"\x85\x81\x81\x85\x91\x81A\x90\xd7\x88\x81!\x90\x83\x991" +
	"P\x84\x89Q\xbe(\xb5 \xa7\x92\x91\x87\x81\x89\x91\x87" +
	"\x01\x97\x19\x01\x89E\xec\x89\xb9(F(!\x8c`\xcf" +
	"-N\x87\x19\x00\x08\x00\x00\xff\xffd\x18P\xf1"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x835d8112b2f2ebbc,
		0xb1aca658b36a4b29,
		0xfe3067a0b17b48a1)
}
